upstream testapi {
        least_conn;

        server 10.10.31.81:80;
        server 10.10.31.163:80;
        server 10.10.31.164:80;
        server 10.10.31.165:80;
        server 10.10.31.83:80;
        server 10.10.31.84:80;
        server 10.10.31.185:80;
        server 10.10.31.189:80;
        server 10.10.31.85:80;
        server 10.10.31.86:80;
        server 10.10.31.87:80;
        server 10.10.31.70:80;
        server 10.10.31.72:80;
        server 10.10.31.73:80;
        server 10.10.31.74:80;
        server 10.10.31.75:80;
        server 10.10.31.76:80;
        server 10.10.31.79:80;
        server 10.10.31.80:80;
        server 10.10.31.88:80;
        server 10.10.31.170;
        server 10.10.31.171;
        server 10.10.31.172;
        server 10.10.31.173;
        server 10.10.31.174;
        server 10.10.31.175;
        server 10.10.31.176;
        server 10.10.31.177;

	keepalive 100;
}

upstream http_backend_sweb {
        least_conn;

	server 10.10.31.112:8080;
	server 10.10.31.122:8080;
	server 10.10.31.123:8080;

    check interval=3000 fall=2 rise=1 timeout=1000 default_down=false type=tcp;

    keepalive 32;
}

server {
        listen  80;
        listen 443 ssl;

        server_name     test.api.srwx.net;

        ssl_certificate         /etc/nginx/ssl/test.api.srwx.net.crt;
        ssl_certificate_key     /etc/nginx/ssl/test.api.srwx.net.key;

        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        ssl_session_cache   shared:SSL:100m;
        ssl_session_timeout 1h;
        ssl_session_tickets off;

        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_ecdh_curve auto;

        resolver 8.8.8.8 8.8.4.4;
        ssl_trusted_certificate /etc/nginx/ssl/test.api.srwx.net.crt;

        access_log /var/log/nginx/test.api.srwx.net.access.log time;
        error_log /var/log/nginx/test.api.srwx.net.error.log;

        if ( $request_method !~ ^(GET|POST|HEAD|PUT|DELETE|OPTIONS)$ ) {
          return 405;
        }

        location / {
			proxy_set_header    X-Real-IP       $remote_addr;
			proxy_set_header    Host            $host;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_http_version  1.1;
			proxy_set_header    Connection "";

			proxy_read_timeout 2s;
			proxy_connect_timeout 2s;

			proxy_buffer_size   256k;
			proxy_buffers   4 512k;
			proxy_busy_buffers_size   512k;

			include geoip.headers.conf;

			proxy_pass http://testapi;
        }


        location @proxy_sweb {
            proxy_pass          http://http_backend_sweb;

	        access_log /var/log/nginx/testapi.api.srwx.net.java.access.log time;
    	    error_log /var/log/nginx/testapi.api.srwx.net.java.error.log;

            proxy_set_header    X-Real-IP       $remote_addr;
            proxy_set_header    Host            $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

            include geoip.headers.conf;
        }

        location ~ \.php$ {
          lua_need_request_body on;
          access_by_lua '
            -- Try POST first
            ngx.req.read_body();
            local args, err = ngx.req.get_post_args();

            local uri = ngx.var.uri;
            local matched = string.find(uri, "process.php$");
            local placement_id = args["placement_id"];
            local inline = args["inline"];

            if (matched ~= nil and (placement_id ~= nil or inline ~= nil))
            then
              execute_proxy_sweb = true
            end

            if (true == execute_proxy_sweb)
            then
                ngx.exec("@proxy_sweb");
            end
          ';

			proxy_set_header    X-Real-IP       $remote_addr;
			proxy_set_header    Host            $host;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_http_version  1.1;
			proxy_set_header    Connection "";

			proxy_read_timeout 2s;
			proxy_connect_timeout 2s;

			proxy_buffer_size   256k;
			proxy_buffers   4 512k;
			proxy_busy_buffers_size   512k;

			include geoip.headers.conf;

			proxy_pass http://testapi;
        }

        location ~ /\.ht {
                deny  all;
        }

        if ($request_uri ~* ^.*\.svn.*$) {
                return 404;
        }
}
