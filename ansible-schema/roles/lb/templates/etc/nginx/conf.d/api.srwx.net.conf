map $geoip_country_code $blocked_country {
	default 0;
	AU 1;
	BE 1;
	BG 1;
	HR 1;
	CY 1;
	CZ 1;
	DK 1;
	EE 1;
	FI 1;
	FR 1;
	DE 1;
	GR 1;
	HU 1;
	IE 1;
	IT 1;
	LV 1;
	LT 1;
	LU 1;
	MT 1;
	NL 1;
	PL 1;
	PT 1;
	RO 1;
	SK 1;
	SI 1;
	ES 1;
	SE 1;
	GB 1;
	IS 1;
	LI 1;
	NO 1;
}

map $arg_auid $block_auid {
  389696 1;
  316049 1;
  330586 1;
  334209 1;
  337436 1;
  340753 1;
  345329 1;
  349398 1;
  352041 1;
  353046 1;
  353051 1;
  353334 1;
  355757 1;
  361919 1;
  370712 1;
  372769 1;
  377685 1;
  382865 1;
  383557 1;
  384171 1;
  384459 1;
  385412 1;
  385964 1;
  386088 1;
  386358 1;
  386364 1;
  387912 1;
  388376 1;
  388616 1;
  388760 1;
  388766 1;
  388862 1;
  389060 1;
  389062 1;
  389536 1;
  389542 1;
  389554 1;
  389556 1;
  389560 1;
  389566 1;
  389572 1;
  389806 1;
  389810 1;
  390044 1;
  390046 1;
  390452 1;
  390472 1;
  390474 1;
  390478 1;
  390482 1;
  390488 1;
  390552 1;
  390554 1;
  390556 1;
  390558 1;
  390890 1;
  390960 1;
  390962 1;
  391098 1;
  391106 1;
  391460 1;
  391724 1;
  391726 1;
  391728 1;
  391730 1;
  391732 1;
  391734 1;
  391736 1;
  392046 1;
  392120 1;
  392122 1;
  default 0;
}

map $arg_apikey $block_apikey {
#  1459764061284666748 1;
#  1470306624290809834 1;
#  1483443822295857741 1;
#  1498571218300346563 1;
#  1519410016307788563 1;
#  1519952123308140590 1;
#  1520256571308350310 1;
#  1522176880309712635 1;
#  1523560373310536220 1;

#  1498450525300307303 1;
#  1479744056294737436 1;
#  1495619673299450611 1;
#  1519410016307788563 1;
  default 0;
}

upstream apisrwx {
        least_conn;

		server 10.10.31.81:80;
		server 10.10.31.163:80;
		server 10.10.31.164:80;
		server 10.10.31.165:80;
		server 10.10.31.83:80;
		server 10.10.31.84:80;
		server 10.10.31.185:80;
		server 10.10.31.189:80;
        server 10.10.31.85:80;
        server 10.10.31.86:80;
        server 10.10.31.87:80;
        server 10.10.31.70:80;
        server 10.10.31.72:80;
        server 10.10.31.73:80;
        server 10.10.31.74:80;
        server 10.10.31.75:80;
        server 10.10.31.76:80;
        server 10.10.31.79:80;
        server 10.10.31.80:80;
        server 10.10.31.88:80;
		server 10.10.31.170;
		server 10.10.31.171;
		server 10.10.31.172;
		server 10.10.31.173;
		server 10.10.31.174;
		server 10.10.31.175;
		server 10.10.31.176;
		server 10.10.31.177;

        check interval=3000 fall=3 rise=2 timeout=1000 default_down=false type=tcp;

	keepalive 100;
}

upstream s2s {
        least_conn;

        server 10.10.31.81:80;
        server 10.10.31.163:80;
        server 10.10.31.164:80;
        server 10.10.31.165:80;
        server 10.10.31.83:80;
        server 10.10.31.84:80;
        server 10.10.31.185:80;
        server 10.10.31.189:80;
        server 10.10.31.85:80;
        server 10.10.31.86:80;
        server 10.10.31.87:80;
        server 10.10.31.70:80;
        server 10.10.31.72:80;
        server 10.10.31.73:80;
        server 10.10.31.74:80;
        server 10.10.31.75:80;
        server 10.10.31.76:80;
        server 10.10.31.79:80;
        server 10.10.31.80:80;
        server 10.10.31.88:80;
        server 10.10.31.170;
        server 10.10.31.171;
        server 10.10.31.172;
        server 10.10.31.173;
        server 10.10.31.174;
        server 10.10.31.175;
        server 10.10.31.176;
        server 10.10.31.177;

        check interval=3000 fall=3 rise=2 timeout=1000 default_down=false type=tcp;

	keepalive 100;
}

upstream http_backend {
        least_conn;

	server 10.10.31.112:8080;
	server 10.10.31.122:8080;
	server 10.10.31.123:8080;

	#check interval=3000 fall=2 rise=1 timeout=1000 default_down=false type=tcp;

	keepalive 512;
}

server {
	listen 80 default_server;
	listen 443 ssl http2 default_server;

	server_name api.srwx.net;

	ssl_certificate         /etc/nginx/ssl/api.srwx.net.pem;
	ssl_certificate_key     /etc/nginx/ssl/api.srwx.net.key;

	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	ssl_session_cache   shared:SSL:100m;
	ssl_session_timeout 1h;
	ssl_session_tickets off;

	ssl_prefer_server_ciphers on;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
	ssl_ecdh_curve auto;

	resolver 8.8.8.8 8.8.4.4;
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_trusted_certificate /etc/nginx/ssl/api.srwx.net.crt;

        add_header 'Access-Control-Allow-Origin' *;

	access_log  /var/log/nginx/api.srwx.net.access.log time;
	error_log   /var/log/nginx/api.srwx.net.error.log;

	proxy_headers_hash_max_size     4096;
	proxy_headers_hash_bucket_size  4096;

        if ( $request_method !~ ^(GET|POST|HEAD|PUT|DELETE|OPTIONS)$ ) {
          return 405;
        }

        location = /VR/adcall.php {

		if ($blocked_country = 1) {
		return 204;
		}

            proxy_set_header    X-Real-IP       $remote_addr;
            proxy_set_header    Host            $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version  1.1;
            proxy_set_header    Connection "";

            proxy_read_timeout 2s;
            proxy_connect_timeout 2s;

            proxy_buffer_size   256k;
            proxy_buffers   4 512k;
            proxy_busy_buffers_size   512k;

            include geoip.headers.conf;

            proxy_pass http://apisrwx;
        }

        location / {
            proxy_set_header    X-Real-IP       $remote_addr;
            proxy_set_header    Host            $host;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version  1.1;
            proxy_set_header    Connection "";

            proxy_read_timeout 2s;
            proxy_connect_timeout 2s;

            proxy_buffer_size   256k;
            proxy_buffers   4 512k;
            proxy_busy_buffers_size   512k;

            include geoip.headers.conf;

            proxy_pass http://apisrwx;
        }


	error_page   502 /502.html;

	location = /502.html {
		root   /usr/share/nginx/html;
	}

	location ~* ^.+.(css|js)$ {
		proxy_set_header    X-Real-IP       $remote_addr;
		proxy_set_header    Host            $host;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version  1.1;
		proxy_set_header    Connection "";

		proxy_read_timeout 2s;
		proxy_connect_timeout 2s;

		proxy_buffer_size   128k;
		proxy_buffers   4 256k;
		proxy_busy_buffers_size   256k;

		include geoip.headers.conf;

		proxy_pass http://apisrwx;

	}

	location @proxy {
		proxy_pass          http://http_backend;

	    access_log  /var/log/nginx/api.srwx.net.java.access.log time;
		#access_log /tmp/postlog.body.api.srwx.net.access.log bodylog;
    	error_log   /var/log/nginx/api.srwx.net.java.error.log;

		proxy_intercept_errors off;

                proxy_read_timeout 10s;
                proxy_connect_timeout 10s;

		proxy_buffer_size   256k;
		proxy_buffers   4 512k;
		proxy_busy_buffers_size   512k;

		proxy_set_header    X-Real-IP       $remote_addr;
		proxy_set_header    Host            $host;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

		include geoip.headers.conf;
	}

    location = /s2s/index.php {
        if ($block_auid) {
          return 204;
        }
        if ($block_apikey) {
                  return 204;
        }
        proxy_buffer_size   256k;
        proxy_buffers   4 512k;
        proxy_busy_buffers_size   512k;

        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    Host            $host;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version  1.1;
        proxy_set_header    Connection "";

        proxy_read_timeout 5s;
        proxy_connect_timeout 5s;

        include geoip.headers.conf;

        proxy_pass http://s2s;

        access_log /var/log/nginx/s2s.api.srwx.net.access.log time;
        error_log /var/log/nginx/s2s.api.srwx.net.error.log info;

    }

	location ~ \.php$ {
		lua_need_request_body on;
		access_by_lua '
			-- Try POST first
			ngx.req.read_body();
		local args, err = ngx.req.get_post_args();

		if not args or next(args) == nil
			then
				-- Since post is empty, use GET
				args, err = ngx.req.get_uri_args();
		end

		local uri = ngx.var.uri;
		model=args["model"];
		action = args["action"];
		if (nil ~= model and model == "message" and nil ~= action and ("geticon" == action or  "getmessage" == action))
			then
				ngx.exec("@proxy");
		end

		local matched = string.find(uri, "inappadcall.php$");
		local banner_type = args["banner_type"];
		local isTest = args["test"];
		local isSdkTest = args["sdk_test"];

		if (matched ~= nil and (nil == banner_type or "" == banner_type or string.find(banner_type, "^inappad$")) and (nil == isTest or "1" ~= isTest) and (nil == isSdkTest or "1" ~= isSdkTest))
		then
			ngx.exec("@proxy");
		end
		';

		proxy_set_header    X-Real-IP       $remote_addr;
		proxy_set_header    Host            $host;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version 	1.1;
		proxy_set_header 	Connection "";

		proxy_read_timeout 2s;
		proxy_connect_timeout 2s;

		proxy_buffer_size   256k;
		proxy_buffers   4 512k;
		proxy_busy_buffers_size   512k;

		include geoip.headers.conf;

		proxy_pass http://apisrwx;
	}

	location /favicon.ico {
		empty_gif;
	}

        location /s2s/event/ {
                proxy_buffer_size   256k;
                proxy_buffers   4 512k;
                proxy_busy_buffers_size   512k;

                proxy_set_header    X-Real-IP       $remote_addr;
                proxy_set_header    Host            $host;
                proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_http_version  1.1;
                proxy_set_header    Connection "";

                proxy_read_timeout 5s;
                proxy_connect_timeout 5s;

                include geoip.headers.conf;

                proxy_pass http://s2s;

                access_log /var/log/nginx/s2s.api.srwx.net.access.log time;
                error_log /var/log/nginx/s2s.api.srwx.net.error.log info;
        }

	location /s2s {
        if ($block_auid) {
		  return 204;
        }
        if ($block_apikey) {
                  return 204;
        }
		proxy_buffer_size   256k;
		proxy_buffers   4 512k;
		proxy_busy_buffers_size   512k;

		proxy_set_header    X-Real-IP       $remote_addr;
		proxy_set_header    Host            $host;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version  1.1;
		proxy_set_header    Connection "";

		proxy_read_timeout 5s;
		proxy_connect_timeout 5s;

		include geoip.headers.conf;

		proxy_pass http://s2s;

		access_log /var/log/nginx/s2s.api.srwx.net.access.log time;
		error_log /var/log/nginx/s2s.api.srwx.net.error.log info;

	}

	location ~ \.aspx$ {
		return 423;
	}

	location /mraid_ads/close3.png {
		return 421;
	}

	location /track {
		if ($arg_guid = "") { return 420; }
        rewrite ^/track/$ /track/index.php break;

		proxy_buffer_size   128k;
		proxy_buffers   4 256k;
		proxy_busy_buffers_size   256k;

		proxy_set_header    X-Real-IP       $remote_addr;
		proxy_set_header    Host            $host;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_http_version  1.1;
		proxy_set_header    Connection "";

		proxy_read_timeout 2s;
		proxy_connect_timeout 2s;

		include geoip.headers.conf;

		proxy_pass http://apisrwx;

		access_log /var/log/nginx/api.srwx.net.access.log time;
	}

	location ~ /\.ht {
		deny  all;
	}

	if ($request_uri ~* ^.*\.svn.*$) {
		return 404;
	}
}
